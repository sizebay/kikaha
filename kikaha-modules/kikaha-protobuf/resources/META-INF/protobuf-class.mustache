package {{packageName}};

import io.undertow.server.HttpHandler;
import io.undertow.server.HttpServerExchange;
import javax.inject.Inject;
import javax.inject.Singleton;
import javax.enterprise.inject.Typed;
import kikaha.core.modules.http.WebResource;
import kikaha.urouting.RoutingMethodResponseWriter;
import kikaha.urouting.RoutingMethodParameterReader;
import kikaha.urouting.RoutingMethodExceptionHandler;
{{#asyncMode}}import kikaha.urouting.api.AsyncResponse;{{/asyncMode}}
import kikaha.urouting.api.Response;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Singleton
@Typed( HttpHandler.class )
@WebResource( path="/{{httpPath}}", method="{{httpMethod}}" )
final public class {{generatedClassName}} implements HttpHandler {

    @Inject RoutingMethodResponseWriter responseWriter;
    @Inject RoutingMethodParameterReader methodDataProvider;
    @Inject RoutingMethodExceptionHandler exceptionHandler;

    @Inject {{{type}}} instance;

    @Override
    public void handleRequest( final HttpServerExchange exchange ) throws Exception {
        try {
            /* Does not require to parse form data. */
            {{#requiresBodyData}}
                /* Requires to parse body data. */
                exchange.getRequestReceiver()
                .receiveFullBytes( this::runMethod, this::handleException );
            {{/requiresBodyData}}
            {{^requiresBodyData}}
                /* Does not require to parse body data. */
                this.runMethod( exchange, null );
            {{/requiresBodyData}}
        } catch ( Throwable cause ) {
            this.handleException( exchange, cause );
        }
    }

{{^asyncMode}}
    private void runMethod( final HttpServerExchange exchange, final byte[] bodyData ){
        if ( exchange.isInIoThread() )
            exchange.dispatch( ()-> this.runMethod( exchange, bodyData ) );
        else try {
    {{#returnType}}
            final {{{returnType}}} response = instance.{{methodName}}( {{{methodParams}}} );
            responseWriter.write( exchange, "application/octet-stream", response );
    {{/returnType}}
    {{^returnType}}
            instance.{{methodName}}( {{{methodParams}}} );
            responseWriter.write( exchange );
    {{/returnType}}
        } catch ( Throwable cause ) {
            this.handleException( exchange, cause );
        }
    }
{{/asyncMode}}{{#asyncMode}}
    private void runMethod( final HttpServerExchange exchange{{^requiresBodyData}}, final byte[] bodyData{{/requiresBodyData}} ){
        try {
            final AsyncResponse asyncResponse = new AsyncResponse( exchange, responseWriter, exceptionHandler, "application/octet-stream" );
            instance.{{methodName}}( {{{methodParams}}} );
        } catch ( Throwable cause ) {
            this.handleException( exchange, cause );
        }
    }
{{/asyncMode}}

    private void handleException( final HttpServerExchange exchange, final Throwable cause ){
        if ( exchange.isInIoThread() ) {
            exchange.dispatch( ()-> handleException( exchange, cause ) );
            return;
        }

        try {
            final Response response = exceptionHandler.handle( cause );
            responseWriter.write( exchange, response );
        } catch ( Throwable newCause ){
            log.error( "Failed to handle the original failure: " + newCause.getMessage(), newCause );
            log.error( "Original failure: " + cause.getMessage(), cause );
            exchange.endExchange();
        }
    }
}