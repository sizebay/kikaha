package {{packageName}};

import io.undertow.websockets.core.CloseMessage;

import java.io.IOException;

import kikaha.core.modules.http.WebResource;
import kikaha.core.modules.websocket.WebSocketHandler;
import kikaha.core.modules.websocket.WebSocketSession;
import javax.inject.Inject;
import javax.inject.Singleton;
import javax.enterprise.inject.Typed;

@Singleton
@Typed( WebSocketHandler.class )
@WebResource(  path="{{httpPath}}", method="GET" )
public class {{generatedClassName}} implements WebSocketHandler {

	@Inject kikaha.urouting.WebSocketDataProvider dataProvider;
	@Inject {{{serviceInterface}}} instance;

	@Override
	public void onOpen( final WebSocketSession session ) {
		{{#onOpenMethod}}
		session.runInWorkerThreads( () -> {
			try {
				instance().{{name}}(
					{{{parameters}}}
				);
			} catch ( final Throwable cause ) {
				onError( session, cause );
			}
		});
		{{/onOpenMethod}}
	}

	@Override
	public void onText( final WebSocketSession session, final String message )
		throws IOException {
		{{#onTextMethod}}
		session.runInWorkerThreads( () -> {
			try {
				instance().{{name}}(
					{{{parameters}}}
				);
			} catch ( final Throwable cause ) {
				onError( session, cause );
			}
		});
		{{/onTextMethod}}
	}

	@Override
	public void onClose( final WebSocketSession session, final CloseMessage cm ) {
		{{#onCloseMethod}}
		session.runInWorkerThreads( () -> {
			try {
				instance().{{name}}(
					{{{parameters}}}
				);
			} catch ( final Throwable cause ) {
				onError( session, cause );
			}
		});
		{{/onCloseMethod}}
	}
	
	void onError( final WebSocketSession session, final Throwable cause ) {
		{{#onErrorMethod}}
		try {
			instance().{{name}}(
				{{{parameters}}}
			);
		} catch ( final Throwable e ) {
			e.printStackTrace();
		}
		{{/onErrorMethod}}
		{{^onErrorMethod}}
			cause.printStackTrace();
		{{/onErrorMethod}}
	}

	final {{serviceInterface}} instance() {
		return instance;
	}
}